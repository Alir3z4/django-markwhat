"""
Set of "markup" template filters for Django.

These filters transform plain text
markup syntaxes to HTML; currently there is support for:

    * Textile, which requires the PyTextile library available at
      http://loopcore.com/python-textile/

    * Markdown, which requires the Python-markdown library from
      http://www.freewisdom.org/projects/python-markdown

    * reStructuredText, which requires docutils from http://docutils.sf.net/

    * CommonMark, which requires commonmark http://commonmark.org/
"""

from django import template
from django.conf import settings
from django.utils.encoding import force_str, smart_str
from django.utils.safestring import mark_safe

register = template.Library()


@register.filter(is_safe=True)
def textile(value: str) -> str:
    """
    Runs textile over a given value.

    Syntax::

        {{ value|textile }}
    """
    import textile  # type: ignore[import-untyped]

    return mark_safe(force_str(textile.textile(smart_str(value))))


@register.filter(is_safe=True)
def markdown(value: str, args: str = "") -> str:
    """
    Markdown Template tag.

    Runs Markdown over a given value, optionally using various
    extensions python-markdown supports.

    Syntax::

        {{ value|markdown:"extension1_name,extension2_name..." }}

    To enable safe mode, which strips raw HTML and only returns HTML
    generated by actual Markdown syntax, pass "safe" as the first
    extension in the list.

    If the version of Markdown in use does not support extensions,
    they will be silently ignored.
    """
    import markdown

    extensions = [e for e in args.split(",") if e]
    if len(extensions) > 0 and extensions[0] == "safe":
        extensions = extensions[1:]

    return mark_safe(markdown.markdown(force_str(value), extensions=extensions))


@register.filter(is_safe=True)
def commonmark(value: str) -> str:
    """
    Runs commonmark over a given value.

    Syntax::

        {{ value|commonmark }}
    """
    import commonmark

    parser = commonmark.Parser()
    renderer = commonmark.HtmlRenderer()
    ast = parser.parse(force_str(value))
    return mark_safe(force_str(renderer.render(ast)))


@register.filter(is_safe=True)
def restructuredtext(value: str) -> str:
    """
    Runs restructured text over a given value.

    Syntax::

        {{ value|restructuredtext }}
    """
    """"""
    from docutils.core import publish_parts

    docutils_settings = getattr(settings, "RESTRUCTUREDTEXT_FILTER_SETTINGS", {})
    parts = publish_parts(source=smart_str(value), writer_name="html4css1", settings_overrides=docutils_settings)
    return mark_safe(force_str(parts["fragment"]))
